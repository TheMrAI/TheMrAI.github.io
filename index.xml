<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MrAI</title><link>https://themrai.github.io/</link><description>Recent content on MrAI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://themrai.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Dynamic programming</title><link>https://themrai.github.io/algorithms/dynamic_programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/dynamic_programming/</guid><description>Name The origin of the term dynamic programming is an interesting one. Two legends are in circulation. One from the author Richard Bellman stating that it was designed to hide the mathematical background of his work from his employer at the time. Choosing dynamic as it has no negative connotations and to refer to the time varying, multistage nature of the problems. Programming was chosen because it didn&amp;rsquo;t contain the word mathematics, and it sounded better than planning.</description></item><item><title>Forced and voluntary feedback</title><link>https://themrai.github.io/contemplation/feedback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/contemplation/feedback/</guid><description>In this essay my aim is to highlight flaws in how corporations are implementing feedback sessions, how these can be mitigated and in general what should we watch out for while doing so. To prepare the reader for what may come, many ideas/opinions might strike the reader as painful, ridiculous or even rage inducing. When this occurs please try to understand the points before dismissing them entirely. You may not agree at all, but there is always something that can be gained from an argument.</description></item><item><title>Fume extractor</title><link>https://themrai.github.io/tinkering/fume_extractor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/tinkering/fume_extractor/</guid><description/></item><item><title>Kadane`s algorithm</title><link>https://themrai.github.io/algorithms/kadane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/kadane/</guid><description>For a given one-dimensional input array of numbers, Kadane&amp;rsquo;s algorithm will find the maximum positive sum, from all possible continuous sub-arrays.
Description The array can contain positive, negative values and zero. The trick behind the algorithms brilliant simplicity comes from the constraint that it will only maximize sub-arrays that have positive sums. If no such sub-arrays exist, the returned value will be zero.
The implementation is strikingly simple. Iterate through the elements and keep summing them up.</description></item><item><title>Longest Common Subsequence</title><link>https://themrai.github.io/algorithms/longest_common_subsequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/longest_common_subsequence/</guid><description>The textbook example (literally) problem is the Longest Common Subsequence. Found in Introduction to Algorithms, Third Edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein Chapter 15.4. Perhaps not the most difficult problem, but one that illustrates the usefulness of dynamic programming very effectively.
Problem statement Given two sequences of characters, X=[x₁, x₂, x₃, &amp;hellip;, xₙ] and Y=[y₁, y₂, y₃, &amp;hellip;, yₘ], find the longest common subsequence (later LCS) Z=[z₁, z₂, z₃, &amp;hellip;, zₖ] where n, m, k &amp;gt;= 1 and n, m, k ∈ ℕ.</description></item><item><title>Most useful piece of plastic</title><link>https://themrai.github.io/tinkering/bit_of_plastic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/tinkering/bit_of_plastic/</guid><description>Fusion 360 link: laptop_stand
Not all projects need to be complicated. In fact this one was one of the simplest of all, but it solves a real problem, and for that I appreciate it very much.
My laptop, a Lenovo T14 Gen 2, as a good deal of modern equipment today advertised towards the business costumer (despite its ~2500 EUR price-tag at the time of writing) tends to heat up quite a bit after a little while.</description></item><item><title>Table fan stand</title><link>https://themrai.github.io/tinkering/table_fan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/tinkering/table_fan/</guid><description>Fusion 360 link: table_fan
Summers are hot where I live, and even though I have a big fan that moves more than enough air to provide help my body enough with its evaporative cooling, it has one problem. It is more than enough. It moves too much air, and it is loud compared to what I need.
In the empire of dirt there is an abundance of 12 cm diameter radial cooling fans.</description></item><item><title>The Book on the Taboo Against Knowing Who You Are - Alan Watts</title><link>https://themrai.github.io/contemplation/book_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://themrai.github.io/contemplation/book_1/</guid><description>Refreshingly Alan Watts has an easy to read and follow writing style, and contrary to how verbose similar books usually are, it is short and to the point.
The following writing goes through the chapters of the book and tries to summarize it in a way I have understood it. This interpretation may be completely wrong and for that it should be taken with a grain of salt. However, I think it will be helpful to those who are contemplating buying the book as it can provide a short summary in what may be found within the pages.</description></item></channel></rss>