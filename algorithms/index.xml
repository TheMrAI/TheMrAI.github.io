<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on MrAI</title><link>https://themrai.github.io/algorithms/</link><description>Recent content in Algorithms on MrAI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 24 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://themrai.github.io/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Longest Common Subsequence</title><link>https://themrai.github.io/algorithms/longest_common_subsequence/</link><pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/longest_common_subsequence/</guid><description>How to solve the &amp;rsquo;longest common subsequence&amp;rsquo; problem. Here we examine a method for solving it recursively (naively) and how to solve it efficiently with dynamic programming.</description></item><item><title>Dynamic programming</title><link>https://themrai.github.io/algorithms/dynamic_programming/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/dynamic_programming/</guid><description>An advanced way for designing solutions. What features does a problem need to display so that this type of solution can be applied? If those are satisfied we can transform algorithms with exponential time complexity to polynomial ones, by sacrificing on space.</description></item><item><title>Kadane`s algorithm</title><link>https://themrai.github.io/algorithms/kadane/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://themrai.github.io/algorithms/kadane/</guid><description>A brilliant way for solving the maximal subsequence problem (or maximal sub-array). One of those specialized algorithms that makes you truly appreciate the genius of others'.</description></item></channel></rss>